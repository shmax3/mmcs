from unittest import TestCase
from numpy import isclose, pi, arccos
from ..path import markov_path, admissible_path_to_point 


class TestPath(TestCase):

    def test_markov_path(self):
        x_dest, y_dest = 2, 1
        n = 100
        t, x, y, phi = markov_path(x=x_dest, y=y_dest, n=n)
        self.assertEqual(len(t), n)
        self.assertEqual(len(x), n)
        self.assertEqual(len(y), n)
        self.assertEqual(len(phi), n)
        self.assertTrue(isclose(t[0], 0))
        self.assertTrue(isclose(x[0], 0))
        self.assertTrue(isclose(y[0], 0))
        self.assertTrue(isclose(phi[0], pi/2))
        self.assertTrue(isclose(t[-1], pi/2 + 1))
        self.assertTrue(isclose(x[-1], x_dest))
        self.assertTrue(isclose(y[-1], y_dest))
        self.assertTrue(isclose(phi[-1] % (2*pi), 0)
                        | isclose(phi[-1] % (2*pi), 2*pi))
        t, x, y, phi = markov_path(x=-x_dest, y=y_dest, n=n)
        self.assertEqual(len(t), n)
        self.assertEqual(len(x), n)
        self.assertEqual(len(y), n)
        self.assertEqual(len(phi), n)
        self.assertTrue(isclose(t[0], 0))
        self.assertTrue(isclose(x[0], 0))
        self.assertTrue(isclose(y[0], 0))
        self.assertTrue(isclose(phi[0], pi/2))
        self.assertTrue(isclose(t[-1], pi/2 + 1))
        self.assertTrue(isclose(x[-1], -x_dest))
        self.assertTrue(isclose(y[-1], y_dest))
        self.assertTrue(isclose(phi[-1] % (2*pi), pi))
        x_dest, y_dest = 1, 0
        n = 100
        t, x, y, phi = markov_path(x=x_dest, y=y_dest, n=n)
        self.assertEqual(len(t), n)
        self.assertEqual(len(x), n)
        self.assertEqual(len(y), n)
        self.assertEqual(len(phi), n)
        self.assertTrue(isclose(t[0], 0))
        self.assertTrue(isclose(x[0], 0))
        self.assertTrue(isclose(y[0], 0))
        self.assertTrue(isclose(phi[0], pi/2))
        self.assertTrue(isclose(t[-1], 2*pi + arccos(7/8) - arccos(1/4)))
        self.assertTrue(isclose(x[-1], x_dest))
        self.assertTrue(isclose(y[-1], y_dest))
        self.assertTrue(isclose(phi[-1] % (2*pi),
                                (arccos(7/8) + arccos(1/4) - 3*pi/2) % (2*pi)))
        t, x, y, phi = markov_path(x=-x_dest, y=y_dest, n=n)
        self.assertEqual(len(t), n)
        self.assertEqual(len(x), n)
        self.assertEqual(len(y), n)
        self.assertEqual(len(phi), n)
        self.assertTrue(isclose(t[0], 0))
        self.assertTrue(isclose(x[0], 0))
        self.assertTrue(isclose(y[0], 0))
        self.assertTrue(isclose(phi[0], pi/2))
        self.assertTrue(isclose(t[-1], 2*pi + arccos(7/8) - arccos(1/4)))
        self.assertTrue(isclose(x[-1], -x_dest))
        self.assertTrue(isclose(y[-1], y_dest))
        self.assertTrue(isclose(phi[-1] % (2*pi),
                                (-arccos(7/8) - arccos(1/4) + 5*pi/2) % (2*pi)))

    def test_admissible_path_to_point(self):
        t_dest, x_dest, y_dest = pi/2 + 1, 2, 1
        n = 100
        t, x, y, phi = admissible_path_to_point(t=t_dest, x=x_dest, y=y_dest, n=n)
        self.assertEqual(len(t), n)
        self.assertEqual(len(x), n)
        self.assertEqual(len(y), n)
        self.assertEqual(len(phi), n)
        self.assertTrue(isclose(t[0], 0))
        self.assertTrue(isclose(x[0], 0))
        self.assertTrue(isclose(y[0], 0))
        self.assertTrue(isclose(phi[0], pi/2))
        self.assertTrue(isclose(t[-1], t_dest))
        self.assertTrue(isclose(x[-1], x_dest))
        self.assertTrue(isclose(y[-1], y_dest))
        t, x, y, phi = admissible_path_to_point(t=t_dest, x=-x_dest, y=y_dest, n=n)
        self.assertEqual(len(t), n)
        self.assertEqual(len(x), n)
        self.assertEqual(len(y), n)
        self.assertEqual(len(phi), n)
        self.assertTrue(isclose(t[0], 0))
        self.assertTrue(isclose(x[0], 0))
        self.assertTrue(isclose(y[0], 0))
        self.assertTrue(isclose(phi[0], pi/2))
        self.assertTrue(isclose(t[-1], t_dest))
        self.assertTrue(isclose(x[-1], -x_dest))
        self.assertTrue(isclose(y[-1], y_dest))
        t_dest, x_dest, y_dest = 2*pi + arccos(7/8) - arccos(1/4), 1, 0
        n = 100
        t, x, y, phi = admissible_path_to_point(t=t_dest, x=x_dest, y=y_dest, n=n)
        self.assertEqual(len(t), n)
        self.assertEqual(len(x), n)
        self.assertEqual(len(y), n)
        self.assertEqual(len(phi), n)
        self.assertTrue(isclose(t[0], 0))
        self.assertTrue(isclose(x[0], 0))
        self.assertTrue(isclose(y[0], 0))
        self.assertTrue(isclose(phi[0], pi/2))
        self.assertTrue(isclose(t[-1], t_dest))
        self.assertTrue(isclose(x[-1], x_dest))
        self.assertTrue(isclose(y[-1], y_dest))